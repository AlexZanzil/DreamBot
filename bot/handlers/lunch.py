import re
from aiogram import types, Dispatcher
from aiogram.filters import Command
from bot.database import Database
from bot.config import DB_PATH
from datetime import datetime, timedelta
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(DB_PATH)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
TIME_PATTERN = r'^([01]?[0-9]|2[0-3]):([0-5][0-9])$'

def _format_display_name(username, first_name, last_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ò–º—è + –§–∞–º–∏–ª–∏—è > –ò–º—è > Username > "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if first_name and last_name:
        return f"{first_name} {last_name}"
    elif first_name:
        return first_name
    elif username:
        return f"@{username}"
    else:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

def _check_time_until_lunch(time_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –æ–±–µ–¥–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        now = datetime.now()
        lunch_hour, lunch_minute = map(int, time_str.split(':'))

        # –í—Ä–µ–º—è –æ–±–µ–¥–∞ —Å–µ–≥–æ–¥–Ω—è
        lunch_time_today = now.replace(
            hour=lunch_hour,
            minute=lunch_minute,
            second=0,
            microsecond=0
        )

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–±–µ–¥–∞ —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if lunch_time_today <= now:
            return None

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        return lunch_time_today - now

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ–±–µ–¥–∞: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lunch
async def cmd_lunch(message: types.Message):
    args = message.text.split()
    user_id = message.from_user.id
    bot = message.bot

    if len(args) == 1:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–±–µ–¥–∞
        lunch_time = db.get_lunch_time(user_id)
        if lunch_time:
            await bot.send_message(user_id, f"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–±–µ–¥–∞: {lunch_time}")
        else:
            await bot.send_message(user_id, "–£ –≤–∞—Å –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ–±–µ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /lunch –ß–ß:–ú–ú –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    time_str = args[1]
    if not re.match(TIME_PATTERN, time_str):
        await bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: /lunch 13:30")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = message.from_user.username
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–±–µ–¥–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    db.set_lunch_time(user_id, username, first_name, last_name, time_str)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    display_name = _format_display_name(username, first_name, last_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –æ–±–µ–¥–∞ —Å–µ–≥–æ–¥–Ω—è
    time_until_lunch = _check_time_until_lunch(time_str)

    if time_until_lunch is None:
        # –í—Ä–µ–º—è –æ–±–µ–¥–∞ —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è
        await bot.send_message(
            user_id,
            f"‚úÖ –í—Ä–µ–º—è –æ–±–µ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–¥—É—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å"
        )

    elif time_until_lunch.total_seconds() <= 300:  # –ú–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç
        total_seconds = int(time_until_lunch.total_seconds())
        minutes = total_seconds // 60
        seconds = total_seconds % 60

        if minutes > 0:
            time_str_left = f"{minutes} –º–∏–Ω. {seconds} —Å–µ–∫."
        else:
            time_str_left = f"{seconds} —Å–µ–∫."

        await bot.send_message(
            user_id,
            f"‚úÖ –í—Ä–µ–º—è –æ–±–µ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}\n\n"
            f"‚è∞ –î–æ –æ–±–µ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {time_str_left}!\n"
        )
    else:
        # –û–±—ã—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –¥–æ –æ–±–µ–¥–∞ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
        hours_left = int(time_until_lunch.total_seconds() // 3600)
        minutes_left = int((time_until_lunch.total_seconds() % 3600) // 60)

        time_left_str = ""
        if hours_left > 0:
            time_left_str = f"{hours_left} —á. {minutes_left} –º–∏–Ω."
        else:
            time_left_str = f"{minutes_left} –º–∏–Ω."

        await bot.send_message(
            user_id,
            f"‚úÖ –í—Ä–µ–º—è –æ–±–µ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}\n\n"
            f"‚è∞ –î–æ –æ–±–µ–¥–∞ —Å–µ–≥–æ–¥–Ω—è: {time_left_str}\n"
            f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({display_name}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è –æ–±–µ–¥–∞: {time_str}")

# –ö–æ–º–∞–Ω–¥–∞ /notifications
async def cmd_notifications(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    bot = message.bot  # üÜï –ü–æ–ª—É—á–∞–µ–º bot
    lunch_time, notifications_enabled = db.get_user_lunch_time_with_notifications(user_id)

    if lunch_time is None:
        await bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lunch –ß–ß:–ú–ú –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–µ–¥–∞.")
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if db.toggle_notifications(user_id):
        new_status = not notifications_enabled
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
        await bot.send_message(user_id, f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}")

        if new_status:
            await bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–µ–¥–∞.")
        else:
            await bot.send_message(user_id, "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–µ–¥–∞.")
    else:
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

# –ö–æ–º–∞–Ω–¥–∞ /remove
async def cmd_remove(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–±—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    user_id = message.from_user.id
    bot = message.bot  # üÜï –ü–æ–ª—É—á–∞–µ–º bot
    lunch_time, _ = db.get_user_lunch_time_with_notifications(user_id)

    if lunch_time is None:
        await bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –æ–±–µ–¥–æ–≤.")
        return

    if db.remove_user_from_schedule(user_id):
        await bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–±–µ–¥–æ–≤.\n"
                                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lunch –ß–ß:–ú–ú –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è.")
    else:
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_lunch_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –æ–±–µ–¥–∞"""
    dp.message.register(cmd_lunch, Command(commands=["lunch"]))
    logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –æ–±–µ–¥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")