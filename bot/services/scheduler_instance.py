import asyncio
import logging
from aiogram import Bot
from bot.database import Database
from bot.config import DB_PATH, GROUP_CHAT_ID, TOPIC_ID
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.base import JobLookupError
from datetime import datetime, timedelta, date
from bot.services.holidays import WorkdayChecker

workday_checker = WorkdayChecker()

async def send_lunch_reminder(chat_id: int, message_text: str, bot):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—á–∏–π –ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å
        if not workday_checker.is_workday():
            holiday_name = workday_checker.get_holiday_name()
            if holiday_name:
                logging.info(f"–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫ ({holiday_name}), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logging.info(f"–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return

        await bot.send_message(chat_id, message_text)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {chat_id}): {message_text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

class LunchScheduler:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database(DB_PATH)
        self.workday_checker = WorkdayChecker()
        self.is_running = False
        self.current_schedule_hash = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = True

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        await self._check_and_send_daily_schedule()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        await self._scheduler_loop()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False

    async def cleanup_on_shutdown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        try:
            await self._unpin_and_delete_old_message()
            logging.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —Ç–æ—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                current_datetime = datetime.now()

                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–π –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                current_datetime = current_datetime.replace(second=0, microsecond=0)
                current_time = current_datetime.strftime("%H:%M")

                # –í—Ä–µ–º—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
                time_in_5_min = (current_datetime + timedelta(minutes=5)).strftime("%H:%M")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ 8:00
                if current_datetime.hour == 8 and current_datetime.minute == 0:
                    if self.workday_checker.is_workday():
                        await self._update_daily_schedule()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await self._check_schedule_changes()

                # 1. –û–°–ù–û–í–ù–´–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (–≤—Ä–µ–º—è –æ–±–µ–¥–∞ –°–ï–ô–ß–ê–°)
                users_now = self.db.get_users_by_lunch_time_with_notifications(current_time)
                if users_now:
                    for user in users_now:
                        user_id, username, first_name, last_name = user
                        display_name = first_name or username or f"ID{user_id}"
                        message_text = f"üçΩÔ∏è –í—Ä–µ–º—è –æ–±–µ–¥–∞! ({current_time})\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞, {display_name}! üòä\n–ù–µ –∑–∞–±—É–¥—å –≤—ã–π—Ç–∏ –∏–∑ –ö–¶!"
                        await send_lunch_reminder(user_id, message_text, self.bot)

                # 2. –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (–æ–±–µ–¥ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç)
                users_in_5_min = self.db.get_users_by_lunch_time_with_notifications(time_in_5_min)
                if users_in_5_min:
                    for user in users_in_5_min:
                        user_id, username, first_name, last_name = user
                        display_name = first_name or username or f"ID{user_id}"
                        message_text = f"‚è∞ –î–æ –æ–±–µ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç!\n\n–í—Ä–µ–º—è –æ–±–µ–¥–∞: {time_in_5_min} üçΩÔ∏è"
                        await send_lunch_reminder(user_id, message_text, self.bot)

                # üéØ –¢–û–ß–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: —Å–ø–∏–º –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
                now = datetime.now()
                next_minute = (now.replace(second=0, microsecond=0) + timedelta(minutes=1))
                sleep_seconds = (next_minute - now).total_seconds()

                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏
                if sleep_seconds < 1:
                    sleep_seconds = 1

                await asyncio.sleep(sleep_seconds)

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–ø–∏–º 60 —Å–µ–∫—É–Ω–¥ –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
                await asyncio.sleep(60)

    async def _check_and_send_daily_schedule(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        today = date.today().strftime("%Y-%m-%d")
        pinned_info = self.db.get_pinned_message()

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –æ–Ω–æ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –¥–Ω—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        if not pinned_info or pinned_info[1] != today:
            if self.workday_checker.is_workday():
                await self._create_daily_schedule()

    async def _update_daily_schedule(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ 8:00"""
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self._unpin_and_delete_old_message()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await self._create_daily_schedule()

    async def _create_daily_schedule(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∑–∞–¥–∞–Ω—ã
            if not GROUP_CHAT_ID or not TOPIC_ID:
                logging.warning("GROUP_CHAT_ID –∏–ª–∏ TOPIC_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                return

            schedule_text = self._generate_schedule_text()
            today = date.today().strftime("%Y-%m-%d")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
            message = await self.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                message_thread_id=TOPIC_ID,
                text=schedule_text,
                parse_mode='HTML'
            )

            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.pin_chat_message(
                chat_id=GROUP_CHAT_ID,
                message_id=message.message_id,
                disable_notification=True
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            self.db.set_pinned_message(message.message_id, today)
            self.current_schedule_hash = self._get_schedule_hash()

            logging.info(f"–°–æ–∑–¥–∞–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–µ–¥–æ–≤ (ID: {message.message_id})")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

    async def _check_schedule_changes(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        try:
            current_hash = self._get_schedule_hash()

            # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if current_hash != self.current_schedule_hash:
                await self._update_pinned_message()
                self.current_schedule_hash = current_hash

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

    async def _update_pinned_message(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∑–∞–¥–∞–Ω—ã
            if not GROUP_CHAT_ID or not TOPIC_ID:
                return

            pinned_info = self.db.get_pinned_message()
            if not pinned_info:
                return

            message_id, _ = pinned_info
            schedule_text = self._generate_schedule_text()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.bot.edit_message_text(
                chat_id=GROUP_CHAT_ID,
                message_id=message_id,
                text=schedule_text,
                parse_mode='HTML'
            )

            logging.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–µ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _unpin_and_delete_old_message(self):
        """–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∑–∞–¥–∞–Ω—ã
            if not GROUP_CHAT_ID:
                return

            pinned_info = self.db.get_pinned_message()
            if not pinned_info:
                return

            message_id, _ = pinned_info

            # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.unpin_chat_message(
                chat_id=GROUP_CHAT_ID,
                message_id=message_id
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.delete_message(
                chat_id=GROUP_CHAT_ID,
                message_id=message_id
            )

            # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.db.clear_pinned_message()

            logging.info(f"–°—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ (ID: {message_id})")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    @staticmethod
    def _format_display_name(username, first_name, last_name):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ò–º—è + –§–∞–º–∏–ª–∏—è > –ò–º—è > Username > user_id
        if first_name and last_name:
            return f"{first_name} {last_name}"
        elif first_name:
            return first_name
        elif username:
            return f"@{username}"
        else:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    def _generate_schedule_text(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        schedules = self.db.get_all_lunch_schedules()

        if not schedules:
            return "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–µ–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –æ–±–µ–¥"

        text = "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–µ–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"

        for user_id, username, first_name, last_name, lunch_time in schedules:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            display_name = self._format_display_name(username, first_name, last_name)
            text += f"üïê <b>{lunch_time}</b> - {display_name}\n"

        text += f"\n<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M')}</i>"

        return text

    def _get_schedule_hash(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        schedules = self.db.get_all_lunch_schedules()
        return hash(str(schedules))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á
scheduler = None


def init_scheduler(bot):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
    """
    global scheduler
    scheduler = AsyncIOScheduler()

    return scheduler


def stop_scheduler(scheduler_instance=None):
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏ —Å–∞–º–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    """
    global scheduler
    sch = scheduler_instance or scheduler
    if sch:
        try:
            sch.shutdown(wait=False)
        except JobLookupError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")